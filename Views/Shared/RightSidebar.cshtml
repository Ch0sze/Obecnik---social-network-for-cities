@using System.Security.Claims
@using Microsoft.AspNetCore.Mvc.TagHelpers
<!-- Right Sidebar -->
<link rel="stylesheet" href="~/css/SidebarStyles.css" asp-append-version="true" />
<div class="sidebar-sb right-sidebar-sb">

    <!-- Profile Header (right sidebar-specific) -->
    <div class="profile-header-sb">
        <!-- Group avatar and name -->
        <div class="profile-info-sb" style="position: relative;">
            <button class="icon-btn-sb" id="user-profile-btn-sb">
                <img id="imagePreview"
                     src="@Url.Action("GetUserPicture", "Account", new { id = User.GetId() })"
                     alt="Avatar"
                     onerror="this.src='/Images/GenericAvatar.png'"
                     class="profile-image icon-image" />
            </button>
            <div class="username-container">
                <span class="text-sb" id="username-sb"></span>
                <div id="user-role-badge" class="role-badge-sb" style="display: none;"></div>
            </div>
        

        <!-- Dropdown (hidden by default) -->
            <div id="superadmin-dropdown-sb" class="dropdown-menu-sb" style="display: none; position: absolute;">
                <button class="dropdown-item-sb" onclick="window.location.href='/Account'">Zobrazit profil</button>
                <button class="dropdown-item-sb" onclick="window.location.href='/SuperAdmin'">Zobrazení žádostí</button>
                <button class="dropdown-item-sb" onclick="window.location.href='/SuperAdmin/Users'">Správa uživatelů</button>
                <button class="dropdown-item-sb" onclick="window.location.href='/SuperAdmin/Admins'">Zobrazení platících správců</button>
            </div>
        </div>

        <!-- Logout Button -->
        <button class="icon-btn-sb" id="hamburger-menu-btn-sb">
            <i class="bi bi-box-arrow-right"></i>
        </button>
    </div>


    <!-- Dropdown Menu (Initially hidden) -->
    <div id="dropdown-menu-sb" class="dropdown-menu-sb" style="display: none;">
        <button class="dropdown-item-sb" id="logout-btn-sb">Odhlásit se</button>
    </div>

    <!-- User Avatars (Dynamic) -->
    <div id="user-list-sb" class="avatar-scroll-sb"></div>
    <!-- Petition List -->
    <div id="top-petition-container-wrapper" style="margin-top: auto; padding: 1rem;">
        <div id="top-petition-container" class="petition-container-sb" style="display:none; cursor: pointer;"></div>
    </div>

</div>

<!-- Dynamic JavaScript -->
<script>

    function initializeSidebarPetitionButton(postId) {
        const button = document.getElementById("sidebar-sign-petition-button");

        if (!button) return;

        let hasSigned = false;

        // Check if user has already signed
        fetch(`/petitions/${postId}/signatures/me`)
            .then(res => res.json())
            .then(signed => {
                hasSigned = signed;
                updateButtonState();
            });

        button.addEventListener('click', () => {
            if (!hasSigned) {
                // Sign the petition
                fetch(`/petitions/${postId}/sign`, { method: "POST" })
                    .then(res => {
                        if (!res.ok) throw new Error("Nepodařilo se podepsat.");
                        hasSigned = true;
                        updateButtonState();
                        loadTopPetition();
                    })
                    .catch(err => {
                        alert('Chyba: ' + err.message);
                    });
            } else {
                // Unsign the petition
                fetch(`/petitions/${postId}/unsign`, { method: "POST" })
                    .then(res => {
                        if (!res.ok) throw new Error("Nepodařilo se zrušit podpis.");
                        hasSigned = false;
                        updateButtonState();
                        loadTopPetition();
                    })
                    .catch(err => {
                        alert('Chyba: ' + err.message);
                    });
            }
        });

        button.addEventListener('mouseenter', () => {
            if (hasSigned) {
                button.classList.remove('sign-petition-btn-sb');
                button.classList.add('btn-danger');
                button.textContent = 'Zrušit podpis';
            }
        });

        button.addEventListener('mouseleave', () => {
            if (hasSigned) {
                button.classList.remove('btn-danger');
                button.classList.add('sign-petition-btn-sb');
                button.textContent = 'Podepsáno';
            }
        });

        function updateButtonState() {
            if (hasSigned) {
                button.textContent = 'Podepsáno';
                button.classList.add('sign-petition-btn-sb');
                button.classList.remove('btn-danger');
            } else {
                button.textContent = 'Podepsat';
                button.classList.add('sign-petition-btn-sb');
                button.classList.remove('btn-danger');
            }
        }
    }

    function loadTopPetition() {
        const communityId = getCommunityIdFromUrl();
        if (!communityId) return;

        fetch(`/get-top-petition?communityId=${communityId}`)
            .then(response => {
                if (response.status === 204) {
                    document.getElementById('top-petition-container').style.display = 'none';
                    return;
                }
                return response.json();
            })
            .then(petition => {
                if (!petition) return;
                const container = document.getElementById('top-petition-container');
                container.innerHTML = `
        <div id="petition-content">
            <div class="petition-title-sb">${petition.title}</div>
            <div class="petition-description-sb">${truncate(petition.description, 100)}</div>
            <div class="petition-signatures-sb">Počet podpisů: ${petition.signatures}</div>
        </div>
        <button id="sidebar-sign-petition-button" class="sign-petition-btn-sb">Podepsat</button>
    `;
                container.style.display = 'block';

                document.getElementById('petition-content').addEventListener('click', function () {
                    $('.opened-post-box[data-post-id="' + petition.id + '"]').trigger('click');
                });

                initializeSidebarPetitionButton(petition.id);
            })

            .catch(err => {
                console.error('Failed to load petition:', err);
                document.getElementById('top-petition-container').style.display = 'none';
            });
    }

    function truncate(text, maxLength) {
        return text.length > maxLength ? text.substring(0, maxLength) + '...' : text;
    }

    function signPetition(postId) {
        fetch(`/petitions/${postId}/sign`, { method: "POST" })
            .then(response => {
                if (!response.ok) throw new Error('Nepodařilo se podepsat.');
                loadTopPetition();
            })
            .catch(error => {
                alert('Chyba: ' + error.message);
            });
    }


    function getCommunityIdFromUrl() {
        const params = new URLSearchParams(window.location.search);
        return params.get('communityId');
    }

    document.addEventListener('DOMContentLoaded', loadTopPetition);
    window.addEventListener('popstate', loadTopPetition);

    // Get the user role from claims
    // Razor should resolve the value of the user role properly
    const userRole = '@User.FindFirst(ClaimTypes.Role)?.Value'
    

    const userProfileBtn = document.getElementById('user-profile-btn-sb');
    const superAdminDropdown = document.getElementById("superadmin-dropdown-sb");

    // Show the dropdown menu if user is SuperAdmin, otherwise redirect to /Account
    userProfileBtn.addEventListener('click', () => {
        if (userRole === "SuperAdmin") {
            const isVisible = superAdminDropdown.style.display === "block";
            superAdminDropdown.style.display = isVisible ? "none" : "block";
        } else {
            window.location.href = '/Account';
        }
    });

    // Redirect to /Account/Logout when "Odhlásit se" is clicked
    const logoutBtn = document.getElementById('logout-btn-sb');
    logoutBtn.addEventListener('click', () => {
        window.location.href = '/Account/Logout';
    });

    // Hamburger menu, which logs out the user
    const hamburgerMenuBtn = document.getElementById('hamburger-menu-btn-sb');
    hamburgerMenuBtn.addEventListener('click', function () {
        window.location.href = '/Account/Logout';
    });
    
    // Handle petition rendering (can be enabled later)
    function renderPetition() {
        document.getElementById('petition-title-sb').innerText = petition.title;
        document.getElementById('petition-description-sb').innerText = petition.description;
        document.getElementById('petition-signatures-sb').innerText = `${petition.signatures} podpisů`;
    }
    document.addEventListener('DOMContentLoaded', function () {
            const userId = '@User.GetId()';
            const communityId = getCommunityIdFromUrl();
            const roleBadge = document.getElementById('user-role-badge');
    
            fetch(`/account/users/${userId}/Firstname`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Failed to fetch username. Status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    document.getElementById('username-sb').innerText = data.username;
                    
                    // Handle role badge display
                    if (userRole === "SuperAdmin") {
                        roleBadge.style.display = 'block';
                        roleBadge.textContent = "SuperAdmin";
                        roleBadge.classList.add('superadmin');
                    } 
                    else if (userRole === "Admin" && communityId) {
                        // Check if user is admin of this specific community
                        fetch(`/account/isAdminOfCommunity?userId=${userId}&communityId=${communityId}`)
                            .then(response => response.json())
                            .then(isAdmin => {
                                if (isAdmin) {
                                    roleBadge.style.display = 'block';
                                    roleBadge.textContent = "Admin";
                                    roleBadge.classList.add('admin');
                                } else {
                                    roleBadge.style.display = 'none'; // Hide if not admin in this community
                                }
                            })
                            .catch(error => {
                                console.error('Error checking admin status:', error);
                                roleBadge.style.display = 'none'; // Hide on error
                            });
                    } else {
                        roleBadge.style.display = 'none'; // Hide if not SuperAdmin or Admin
                    }
                })
                .catch(error => {
                    console.error('Error fetching username:', error);
                    roleBadge.style.display = 'none'; // Hide on error
                });
        });
    
</script>



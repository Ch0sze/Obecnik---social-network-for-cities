@using OpenQA.Selenium.BiDi.Modules.Script
@model HomeViewModel.Post

<head>
    <meta property="og:title" content="@Model.Title"/>
    <meta property="og:description" content="@Model.Description"/>
    <meta property="og:image" content="@Model.Photo"/>
</head>
<div class="opened-post-modal-container">
    <div class="modal fade" id="openedPostModal" tabindex="-1" aria-labelledby="openedPostModalLabel"
         aria-hidden="true">
        <div class="modal-dialog modal-fullscreen">
            <div class="modal-content">
                <div class="modal-body p-0 h-100">
                    <div class="row g-0 h-100">
                        <!-- Left Column - Image (70%) -->
                        <div class="image-wrapper col-lg-7 h-100 position-relative">
                            <!-- Label with semi-transparent background -->
                            <div class="position-absolute top-0 start-0 p-2 m-3 rounded" style="background-color: rgba(0,0,0,0.5);">
                                <h5 class="fw-bold mb-0" style="font-size: 1.2rem; color: white;">
                                    @(Model.IsPetition ? "Petice" : "Diskuze")
                                </h5>
                            </div>
                            
                            @if (Model.Photo)
                            {
                                <div class="h-100 w-100 d-flex align-items-center justify-content-center">
                                    <img src="@Url.Action("GetImage", "Home", new { postId = Model.Id })"
                                         alt="Post image"
                                         class="h-100 w-auto"
                                         style="object-fit: contain; max-width: 100%;"/>
                                </div>
                            }
                            @if (Model.IsPetition)
                                {
                                    <!-- Signatures overlay - initially hidden -->
                                    <div class="signatures-overlay position-absolute bottom-0 end-0 p-3" 
                                         style="width: 275px; max-height: 40%; display: none;">
                                        <div class="rounded shadow-sm p-2" style="height: 100%; background-color: rgba(255, 255, 255, 0.85); backdrop-filter: blur(2px);">
                                            <h6 class="fw-bold mb-2 text-center">Petici již podepsali:</h6>
                                            <div id="signaturesList" style="overflow-y: auto; max-height: calc(100% - 30px);">
                                                <ul id="signatureUsers" class="list-unstyled mb-0"></ul>
                                            </div>
                                        </div>
                                    </div>
                                }
                        </div>
                        
                        <!-- Right Column - Content (30%) -->
                        <div class="col-lg-5 h-100 d-flex flex-column">
                            <!-- Header section (fixed height) -->
                            <div class="border-bottom">
                                <!-- User info and close button -->
                                <div class="p-3 d-flex justify-content-between align-items-center">
                                    <div class="d-flex align-items-center">
                                        <img src="@("/user-photo/" + Model.CreatedById)"
                                             alt="Avatar"
                                             onerror="this.src='/Images/GenericAvatar.png'"
                                             style="width: 40px; height: 40px; object-fit: cover; border-radius: 50%; margin-right: 10px"/>
                                        <div>
                                            <strong style="font-size: 16px;">@Model.CreatedBy</strong>
                                            <small class="d-block text-muted" style="font-size: 13px;">@Model.GetFormattedCreatedAt()</small>
                                        </div>
                                    </div>
                                    <div class="d-flex align-items-center">
                                        @if (Model.Status is PetitionStatus st)
                                        {
                                            <!-- Always show status badge -->
                                            <small class="badge me-2 @(st switch
                                                                    {
                                                                        PetitionStatus.Open => "bg-success",
                                                                        PetitionStatus.Completed => "bg-primary",
                                                                        PetitionStatus.Canceled => "bg-danger",
                                                                        PetitionStatus.Closed => "bg-secondary",
                                                                        _ => "bg-secondary"
                                                                    })">
                                                @(st switch
                                                {
                                                    PetitionStatus.Open => "Otevřená",
                                                    PetitionStatus.Completed => "Úspěšná",
                                                    PetitionStatus.Canceled => "Zrušená",
                                                    PetitionStatus.Closed => "Neúspěšná",
                                                    _ => "Neznámý stav"
                                                })
                                            </small>
                                
                                            <!-- Show dropdown only for admins/owners -->
                                            @if (Model.CreatedBy == User.Identity?.Name && !Model.IsAdmin && st != PetitionStatus.Canceled || Model.IsAdmin)
                                            {
                                                <div class="dropdown me-2">
                                                    @{
                                                        var statusClass = st switch
                                                        {
                                                            PetitionStatus.Open => "btn-status-open",
                                                            PetitionStatus.Closed => "btn-status-closed",
                                                            PetitionStatus.Completed => "btn-status-completed",
                                                            PetitionStatus.Canceled => "btn-status-canceled",
                                                            _ => ""
                                                        };
                                                    }
                                                    <button class="btn btn-sm dropdown-toggle @statusClass"
                                                            type="button" id="statusDropdownModal"
                                                            data-bs-toggle="dropdown" aria-expanded="false">
                                                        Změnit stav
                                                    </button>
                                                    <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="statusDropdownModal">
                                                        @if (Model.CreatedBy == User.Identity?.Name && !Model.IsAdmin && st != PetitionStatus.Canceled)
                                                        {
                                                            <li>
                                                                <form asp-action="ChangeStatus" method="post"
                                                                      class="m-0 p-0 change-status-form"
                                                                      data-post-id="@Model.Id" data-status="Canceled">
                                                                    <input type="hidden" name="postId" value="@Model.Id"/>
                                                                    <input type="hidden" name="status" value="Canceled"/>
                                                                    <input type="hidden" name="returnUrl"
                                                                           value="@Context.Request.Path"/>
                                                                    <button type="button"
                                                                            class="dropdown-item trigger-status-change">
                                                                        Zrušit petici
                                                                    </button>
                                                                </form>
                                                            </li>
                                                        }
                                                        @if (Model.IsAdmin)
                                                        {
                                                            @if (st != PetitionStatus.Closed)
                                                            {
                                                                <li>
                                                                    <form asp-action="ChangeStatus" method="post"
                                                                          class="m-0 p-0 change-status-form"
                                                                          data-post-id="@Model.Id" data-status="Closed">
                                                                        <input type="hidden" name="postId" value="@Model.Id"/>
                                                                        <input type="hidden" name="status" value="Closed"/>
                                                                        <input type="hidden" name="returnUrl"
                                                                               value="@Context.Request.Path"/>
                                                                        <button type="button"
                                                                                class="dropdown-item trigger-status-change">
                                                                            Neúspěšná petice
                                                                        </button>
                                                                    </form>
                                                                </li>
                                                            }
                                                            @if (st != PetitionStatus.Completed)
                                                            {
                                                                <li>
                                                                    <form asp-action="ChangeStatus" method="post"
                                                                          class="m-0 p-0 change-status-form"
                                                                          data-post-id="@Model.Id" data-status="Completed">
                                                                        <input type="hidden" name="postId" value="@Model.Id"/>
                                                                        <input type="hidden" name="status" value="Completed"/>
                                                                        <input type="hidden" name="returnUrl"
                                                                               value="@Context.Request.Path"/>
                                                                        <button type="button"
                                                                                class="dropdown-item trigger-status-change">
                                                                            Úspěšná petice
                                                                        </button>
                                                                    </form>
                                                                </li>
                                                            }
                                                            @if (st != PetitionStatus.Canceled)
                                                            {
                                                                <li>
                                                                    <form asp-action="ChangeStatus" method="post"
                                                                          class="m-0 p-0 change-status-form"
                                                                          data-post-id="@Model.Id" data-status="Canceled">
                                                                        <input type="hidden" name="postId" value="@Model.Id"/>
                                                                        <input type="hidden" name="status" value="Canceled"/>
                                                                        <input type="hidden" name="returnUrl"
                                                                               value="@Context.Request.Path"/>
                                                                        <button type="button"
                                                                                class="dropdown-item trigger-status-change">
                                                                            Zrušená petice
                                                                        </button>
                                                                    </form>
                                                                </li>
                                                            }
                                                        }
                                                    </ul>
                                                </div>
                                            }
                                        }
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                </div>
                                
                                <!-- Post title and description -->
                                <div class="px-3 pb-1">
                                    <h4 class="fw-bold mb-2" style="word-break: break-word;">@Model.Title</h4>
                                    <p style="font-size: 16px; word-break: break-word; margin-bottom: 15px;">@Model.Description </p>
                                    
                                    <!-- Share button -->
                                    <div class="mb-2 mt-2 d-flex justify-content-end border-top">
                                        <button onclick="copyLinkToClipboard()" class="btn btn-sm btn-hover-light share-btn">
                                            <img src="~/icons/Share.svg" alt="Sdílet" style="width: 18px; height: 18px; margin-right: 5px;">
                                            <span class="text-label">Sdílet</span>
                                        </button>
                                    </div>
                                    
                                    <!-- Comment input (fixed position) -->
                                    <form id="commentForm" onsubmit="submitComment(event)" class="pt-2">
                                        <div class="input-group">
                                            <input name="Content" type="text" class="form-control"
                                                   placeholder="Přidejte komentář" id="commentContent" maxlength="500"
                                                   required/>
                                            <input type="hidden" name="PostId" value="@Model.Id"/>
                                            <button type="submit" class="send-button btn btn-primary">
                                                <img src="~/icons/send.svg" alt="Odeslat" class="send-icon"/>
                                            </button>
                                        </div>
                                        <small id="titleLength" class="text-muted">limit 500 znaků</small>
                                        <div id="commentResponse" class="mt-2" style="font-size: 0.85rem;"></div>
                                    </form>
                                </div>
                            </div>
                            
                            <!-- Scrollable comments section -->
                            <div class="flex-grow-1 overflow-auto p-3">
                                <!-- Comments list (scrollable) -->
                                <div id="commentsList"></div>
                            </div>

                            <!-- Bottom fixed section (status reason and petition section) -->
                            <div class="border-top p-3 bottom-fixed-section">
                                <!-- Status reason if exists -->
                                @if (!string.IsNullOrWhiteSpace(Model.StatusReason))
                                {
                                    <div class="mb-3">
                                        <label class="form-label fw-bold" style="font-size: 1rem;">Důvod stavu:</label>
                                        <div class="border rounded p-2 bg-light"
                                             style="font-size: 0.95rem; white-space: pre-line;">
                                            @Model.StatusReason
                                        </div>
                                    </div>
                                }

                                <!-- Petition section if applicable -->
                                @if (Model.IsPetition)
                                {
                                    <div class="mb-2" id="petitionArea">
                                        <div id="signatureCount" class="text-muted mb-2" style="font-size: 1.2rem;"></div>
                                        <div class="d-flex">
                                            <button id="signPetitionButton" class="sign-petition-button btn btn-primary flex-grow-1 me-2"
                                                    @(Model.Status != PetitionStatus.Open ? "disabled" : "")>
                                                Podepsat petici
                                            </button>
                                            @if (Model.IsAdmin)
                                            {
                                                <button class="btn btn-outline-secondary download-button flex-shrink-1" 
                                                        style="width: 30%;" 
                                                        data-postid="@Model.Id">
                                                    Stáhnout podpisy
                                                </button>
                                            }
                                        </div>
                                        <div id="signatureMessage" class="mt-2 text-muted text-center" style="font-size: 0.9rem;"></div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@await Html.PartialAsync("_ResponsePetition")

<script>
    document.querySelectorAll('.trigger-status-change').forEach(button => {
        button.addEventListener('click', function () {
            const form = button.closest('form');
            const postId = form.dataset.postId;
            const status = form.dataset.status;

            document.getElementById('modalPostId').value = postId;
            document.getElementById('modalStatus').value = status;
            document.getElementById('modalReturnUrl').value = window.location.pathname;

            const modal = new bootstrap.Modal(document.getElementById('statusChangeModal'));
            modal.show();
        });
    });

    document.body.addEventListener('click', function (e) {
        if (!e.target.matches('.download-button')) return;
        e.preventDefault();
        const postId = e.target.getAttribute('data-postid');
        downloadExcel(postId);
    });
    function downloadExcel(postId) {
        // přesměruje prohlížeč na nový endpoint
        window.location.href = `/petitions/${postId}/signatures/excel`;
    }

    function openAdminCommentModal(postId) {
        document.getElementById('modalPostId').value = postId;
        const modal = new bootstrap.Modal(document.getElementById('adminCommentModal'));
        modal.show();
    }

    function copyLinkToClipboard() {
        const link = window.location.href;  // Získání aktuální URL

        // Používáme moderní API pro kopírování do schránky
        navigator.clipboard.writeText(link)
            .then(function () {
                alert("Odkaz byl zkopírován do schránky!"); // Uživatelská zpráva
            })
            .catch(function (err) {
                console.error("Chyba při kopírování odkazu: ", err); // Chyba při kopírování
                alert("Chyba při kopírování odkazu.");
            });
    }

    function initializePetitionButton(postId, petitionStatus) {
        const button = document.getElementById("signPetitionButton");
        const message = document.getElementById("signatureMessage");

        if (!button || !message) return; // pokud není tlačítko, skonči

        let hasSigned = false;

        const countDisplay = document.getElementById("signatureCount");

        function updateSignatureCount() {
            fetch(`/petitions/${postId}/signatures/count`)
                .then(res => res.json())
                .then(count => {
                    countDisplay.textContent = `Počet podpisů: ${count}`;
                });
        }

        function enableHoverEffect() {
            if (petitionStatus !== "Otevřená") return;

            button.addEventListener("mouseenter", () => {
                if (hasSigned) {
                    button.classList.remove("btn-primary");
                    button.classList.add("btn-danger");
                    button.textContent = "Zrušit podpis";
                }
            });

            button.addEventListener("mouseleave", () => {
                if (hasSigned) {
                    button.classList.remove("btn-danger");
                    button.classList.add("btn-primary");
                    button.textContent = "Podepsáno";
                }
            });
        }

        updateSignatureCount();
        loadSignatures(postId);
        loadComments(postId);

        fetch(`/petitions/${postId}/signatures/me`)
            .then(res => res.json())
            .then(signed => {
                hasSigned = signed;
                if (hasSigned) {
                    button.textContent = "Podepsáno";
                    button.classList.add("btn-primary");
                    enableHoverEffect();
                }
            });

        button.addEventListener("click", () => {
            if (!hasSigned) {
                fetch(`/petitions/${postId}/sign`, {method: "POST"})
                    .then(res => {
                        if (!res.ok) throw new Error("Nepodařilo se podepsat.");
                        hasSigned = true;
                        button.textContent = "Podepsáno";
                        // message.textContent = "Děkujeme za Váš podpis!";
                        button.classList.remove("btn-danger");
                        button.classList.add("btn-primary");
                        updateSignatureCount();
                        loadSignatures(postId);
                        loadComments(postId);
                        loadTopPetition();
                        enableHoverEffect();
                    })
                    .catch(err => {
                        message.textContent = "Error: " + err.message;
                    });
            } else {
                fetch(`/petitions/${postId}/unsign`, {method: "POST"})
                    .then(res => {
                        if (!res.ok) throw new Error("Nepodařilo se zrušit podpis.");
                        hasSigned = false;
                        button.textContent = "Podepsat petici";
                        button.classList.remove("btn-danger");
                        button.classList.add("btn-primary");
                        // message.textContent = "Podpis zrušen.";
                        updateSignatureCount();
                        loadSignatures(postId);
                        loadComments(postId);
                        loadTopPetition();
                    })
                    .catch(err => {
                        message.textContent = "Error: " + err.message;
                    });
            }
        });

    }

    function submitComment(event) {
        event.preventDefault();
        const form = document.getElementById("commentForm");
        const formData = new FormData(form);

        const content = formData.get("Content");
        const postId = formData.get("PostId");

        fetch('/Comments/Create', {
            method: 'POST',
            body: formData
        })
            .then(response => {
                if (!response.ok) throw new Error("Chyba při odesílání.");
                return response.text(); // protože backend vrací jen text
            })
            .then(data => {
                document.getElementById("commentContent").value = "";
                loadComments(postId)
            })
            .catch(error => {
                document.getElementById("commentResponse").innerText = "⚠️ Došlo k chybě: " + error.message;
            });
    }

    function loadComments(postId) {
        console.log("Načítám komentáře pro příspěvek s ID:");  // Debug log, abychom věděli, že funkce je volaná.

        fetch(`/comments/${postId}`)
            .then(response => {
                console.log("Odpověď ze serveru:", response); // Debug log pro odpověď ze serveru
                if (!response.ok) {
                    console.error("Chyba při načítání komentářů:", response.statusText);
                    throw new Error("Chyba při načítání komentářů.");
                }
                return response.json();
            })
            .then(data => {
                console.log("Komentáře, které server vrátil:", data);  // Debug log pro data, která server posílá zpět.
                const list = document.getElementById("commentsList");
                list.innerHTML = "";  // Vymažeme staré komentáře.

                // Vytvoření HTML pro každý komentář
                data.forEach(comment => {
                    console.log("Komentář:", comment); // Debug log pro každý komentář

                    const div = document.createElement("div");
                    div.className = "d-flex mb-3";

                    const avatar = document.createElement("img");
                    avatar.src = comment.userId ? `/user-photo/${comment.userId}` : "/Images/GenericAvatar.png";
                    avatar.alt = "Avatar";
                    avatar.style = "width: 40px; height: 40px; object-fit: cover; border-radius: 50%; margin-right: 10px;";

                    const contentDiv = document.createElement("div");
                    contentDiv.innerHTML = `
                    <strong>${comment.userFullName}</strong>
                    <small class="text-muted d-block">${new Date(comment.dateTime).toLocaleString()}</small>
                    <p class="mb-1  comment-text">${comment.content}</p>
                `;

                    div.appendChild(avatar);
                    div.appendChild(contentDiv);
                    list.appendChild(div);
                });
            })
            .catch(error => {
                console.error("Chyba při načítání komentářů:", error);
            });
    }

    function loadSignatures(postId) {
        fetch(`/petitions/${postId}/signatures`)
            .then(response => {
                if (!response.ok) {
                    throw new Error("Error loading signatures");
                }
                return response.json();
            })
            .then(data => {
                const signaturesContainer = document.querySelector('.signatures-overlay');
                
                // Only proceed if we have signatures
                if (data && data.length > 0) {
                    console.log("Loaded signatures:", data);
                    const signaturesList = document.getElementById("signatureUsers");
                    signaturesList.innerHTML = "";
    
                    data.forEach(signature => {
                        const li = document.createElement("li");
                        li.className = "d-flex align-items-center mb-2";
    
                        // Avatar
                        const avatar = document.createElement("img");
                        avatar.src = signature.userId ? `/user-photo/${signature.userId}` : "/Images/GenericAvatar.png";
                        avatar.alt = signature.fullName;
                        avatar.style = "width: 30px; height: 30px; object-fit: cover; border-radius: 50%; margin-right: 8px";
    
                        // Name and date
                        const contentDiv = document.createElement("div");
                        contentDiv.innerHTML = `
                            <strong style="font-size: 0.9rem;">${signature.fullName}</strong>
                            <small class="text-muted d-block" style="font-size: 0.7rem;">
                                ${new Date(signature.signedAt).toLocaleDateString()}
                            </small>
                        `;
    
                        li.appendChild(avatar);
                        li.appendChild(contentDiv);
                        signaturesList.appendChild(li);
                    });
    
                    // Show the container
                    signaturesContainer.style.display = 'block';
                    
                    // Enable scrolling if more than 5 signatures
                    const container = document.getElementById("signaturesList");
                    container.style.overflowY = data.length > 5 ? "auto" : "hidden";
                } else {
                    // Hide the container if no signatures
                    signaturesContainer.style.display = 'none';
                }
            })
            .catch(error => {
                console.error("Error loading signatures:", error);
                document.querySelector('.signatures-overlay').style.display = 'none';
            });
    }

    document.addEventListener("DOMContentLoaded", function () {
        console.log("Dokument byl načten.");  // Log pro potvrzení, že dokument je načten.

        const modal = document.getElementById("openedPostModal");

        if (modal) {
            console.log("Modal okno nalezeno, přidávám posluchač událostí.");  // Log pro potvrzení, že modal je nalezen

            modal.addEventListener("shown.bs.modal", function () {
                console.log("Modal byl zobrazen.");  // Log pro potvrzení, že modal je zobrazený
                const postId = "@Model.Id"; // ASP.NET ti sem vloží správné ID příspěvku
                console.log("ID příspěvku pro načítání komentářů:", postId);  // Log pro ověření ID příspěvku
                loadComments(postId);  // Volání funkce pro načítání komentářů
            });
        } else {
            console.error("Modal okno nebylo nalezeno.");  // Pokud modal není nalezen, logujeme chybu
        }
    })
</script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script> <!-- Zajisti, že jQuery je na stránce -->
<script>
    $(document).ready(function () {
        $('#openedPostModal').on('shown.bs.modal', function () {
            console.log("Modal byl zobrazen.");
            const postId = "@Model.Id";
            console.log("ID příspěvku pro načítání komentářů:", postId);
            loadSignatures(postId);
            loadComments(postId);
            initializePetitionButton(postId, '@Model.Status');
        });
    });
</script>
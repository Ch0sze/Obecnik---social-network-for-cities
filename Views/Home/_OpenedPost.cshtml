@model HomeViewModel.Post

<div class="opened-post-modal-container">
    <div class="modal fade" id="openedPostModal" tabindex="-1" aria-labelledby="openedPostModalLabel"
         aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <!-- Hlavička s křížkem -->

                <!-- Tělo -->
                <div class="modal-body pt-0">
                    <div class="d-flex flex-column flex-sm-row">
                        <!-- Levý sloupec s obrázkem -->
                        <div class="col-12 col-sm-9 mb-3 mb-sm-0" style="padding-right: 15px;">
                            <!-- Levý sloupec na 75% (col-sm-9) -->
                            @if (Model.Photo)
                            {
                                <div class="image-wrapper">
                                    <img src="@Url.Action("GetImage", "Home", new { postId = Model.Id })"
                                         alt="Post image" class="img-fluid"/>
                                </div>
                            }
                            <div class="my-3">
                                <form id="commentForm" onsubmit="submitComment(event)"
                                      class="d-flex align-items-center comment-wrapper">
                                    <input name="Content" type="text" class="input-field"
                                           placeholder="Přidejte komentář" id="commentContent" maxlength="500"
                                           required/>
                                    <input type="hidden" name="PostId" value="@Model.Id"/>
                                    <button type="submit" class="send-button">
                                        <img src="~/icons/send.svg" alt="Odeslat" class="send-icon"/>
                                    </button>
                                </form>
                                <span id="titleLength"
                                      style="font-size: 12px; color: gray; margin-bottom: 12px; margin-left: 2px;">limit 500 znaků</span>
                                <div id="commentResponse" style="margin-top: 8px; font-size: 0.85rem;"></div>
                                <div id="commentsList" class="mt-4">
                                    <!-- Sem se načtou komentáře -->
                                </div>
                            </div>
                        </div>

                        <!-- Pravý sloupec s textem -->
                        <div class="col-12 col-sm-3" style="margin-top: 10px;">
                            <!-- Zvětšení názvu diskuze/petice, přidání mezery a středění -->
                            <h5 class="mb-4 fw-bold text-center "
                                style="font-size: 1.5rem; text-align: center; ">@(Model.IsPetition ? "Petice" : "Diskuze")
                            </h5> <!-- Zvětšený a středěný text -->

                            <div class="d-flex align-items-center mb-3">
                                <!-- Ikona s dynamickou velikostí a přidáním mezery -->
                                <img src="~/Images/GenericAvatar.png" alt="Avatar"
                                     style="width: 30px; height: auto; user-select: none; pointer-events: none; margin-right: 16px; "/>
                                <!-- Změna velikosti ikony -->

                                <div class="d-flex flex-column mt-4">
                                    <div class="d-flex align-items-center">
                                        <strong style="font-size: 16px;">@Model.CreatedBy</strong>
                                        <!-- Zmenšený text pro autora -->
                                        <!-- Zmenšený text pro datum -->
                                    </div>
                                    <small class="ms-2 text-muted"
                                           style="font-size: 13px;word-break: break-word;">@Model.GetFormattedCreatedAt()</small>
                                </div>
                            </div>

                            <!-- Titulek příspěvku -->
                            <h4 class="fw-bold mb-3"
                                style="word-break: break-word; margin-left: 10px;">@Model.Title</h4>
                            <!-- Zmenšený titulek příspěvku -->

                            <!-- Popis příspěvku -->
                            <p style="font-size: 16px; word-break: break-word; margin-left: 10px;">@Model.Description</p>
                            <!-- Zmenšený popis -->
                            @if (Model.IsPetition)
                            {
                                <div class="text-center mt-4" id="petitionArea">
                                    <div id="signatureCount" class="text-muted mb-2" style="font-size: 0.95rem;"></div>
                                    <button id="signPetitionButton" class="sign-petition-button">
                                        Podepsat petici
                                    </button>
                                    <div id="signatureMessage" class="mt-2 text-muted" style="font-size: 0.9rem;"></div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script>

    function initializePetitionButton(postId) {
        const button = document.getElementById("signPetitionButton");
        const message = document.getElementById("signatureMessage");

        if (!button || !message) return; // pokud není tlačítko, skonči

        let hasSigned = false;

        const countDisplay = document.getElementById("signatureCount");

        function updateSignatureCount() {
            fetch(`/petitions/${postId}/signatures/count`)
                .then(res => res.json())
                .then(count => {
                    countDisplay.textContent = `Počet podpisů: ${count}`;
                });
        }
        function enableHoverEffect() {
            button.addEventListener("mouseenter", () => {
                if (hasSigned) {
                    button.classList.remove("sign-petition-button");
                    button.classList.add("btn-danger");
                    button.textContent = "Zrušit podpis";
                }
            });

            button.addEventListener("mouseleave", () => {
                if (hasSigned) {
                    button.classList.remove("btn-danger");
                    button.classList.add("sign-petition-button");
                    button.textContent = "Podepsáno";
                }
            });
        }

        updateSignatureCount();
        
        fetch(`/petitions/${postId}/signatures/me`)
            .then(res => res.json())
            .then(signed => {
                hasSigned = signed;
                if (hasSigned) {
                    button.textContent = "Podepsáno";
                    button.classList.add("sign-petition-button");
                    enableHoverEffect();
                }
            });

        button.addEventListener("click", () => {
            if (!hasSigned) {
                fetch(`/petitions/${postId}/sign`, {method: "POST"})
                    .then(res => {
                        if (!res.ok) throw new Error("Nepodařilo se podepsat.");
                        hasSigned = true;
                        button.textContent = "Podepsáno";
                        message.textContent = "Děkujeme za Váš podpis!";
                        button.classList.remove("btn-danger");
                        button.classList.add("sign-petition-button");
                        updateSignatureCount();
                        enableHoverEffect();
                    })
                    .catch(err => {
                        message.textContent = "Error: " + err.message;
                    });
            } else {
                fetch(`/petitions/${postId}/unsign`, {method: "POST"})
                    .then(res => {
                        if (!res.ok) throw new Error("Nepodařilo se zrušit podpis.");
                        hasSigned = false;
                        button.textContent = "Podepsat petici";
                        button.classList.remove("btn-danger", "sign-petition-button");
                        button.classList.add("sign-petition-button");
                        message.textContent = "Podpis zrušen.";
                        updateSignatureCount();
                    })
                    .catch(err => {
                        message.textContent = "Error: " + err.message;
                    });
            }
        });
    }

    function submitComment(event) {
        event.preventDefault();
        const form = document.getElementById("commentForm");
        const formData = new FormData(form);

        const content = formData.get("Content");
        const postId = formData.get("PostId");

        fetch('/Comments/Create', {
            method: 'POST',
            body: formData
        })
            .then(response => {
                if (!response.ok) throw new Error("Chyba při odesílání.");
                return response.text(); // protože backend vrací jen text
            })
            .then(data => {
                document.getElementById("commentContent").value = "";

                // ➕ Přidáme komentář ručně do DOMu (ze zadaných dat)
                const list = document.getElementById("commentsList");

                const div = document.createElement("div");
                div.className = "d-flex mb-3";

                const avatar = document.createElement("img");
                avatar.src = "/Images/GenericAvatar.png"; // nemáme user picture, takže dáme výchozí
                avatar.alt = "Avatar";
                avatar.style = "width: 40px; height: 40px; object-fit: cover; border-radius: 50%; margin-right: 10px;";

                const contentDiv = document.createElement("div");
                const now = new Date().toLocaleString(); // použijeme aktuální čas

                contentDiv.innerHTML = `
                    <strong>Vy</strong> 
                    <small class="text-muted d-block">${now}</small>
                    <p class="mb-1  comment-text">${content}</p>
                `;

                div.appendChild(avatar);
                div.appendChild(contentDiv);
                list.insertBefore(div, list.firstChild); // nový komentář nahoru
            })
            .catch(error => {
                document.getElementById("commentResponse").innerText = "⚠️ Došlo k chybě: " + error.message;
            });
    }

</script>
<script>
    function loadComments(postId) {
        console.log("Načítám komentáře pro příspěvek s ID:");  // Debug log, abychom věděli, že funkce je volaná.

        fetch(`/comments/${postId}`)
            .then(response => {
                console.log("Odpověď ze serveru:", response); // Debug log pro odpověď ze serveru
                if (!response.ok) {
                    console.error("Chyba při načítání komentářů:", response.statusText);
                    throw new Error("Chyba při načítání komentářů.");
                }
                return response.json();
            })
            .then(data => {
                console.log("Komentáře, které server vrátil:", data);  // Debug log pro data, která server posílá zpět.
                const list = document.getElementById("commentsList");
                list.innerHTML = "";  // Vymažeme staré komentáře.

                // Vytvoření HTML pro každý komentář
                data.forEach(comment => {
                    console.log("Komentář:", comment); // Debug log pro každý komentář

                    const div = document.createElement("div");
                    div.className = "d-flex mb-3";

                    const avatar = document.createElement("img");
                    avatar.src = comment.userPicture || "/Images/GenericAvatar.png";
                    avatar.alt = "Avatar";
                    avatar.style = "width: 40px; height: 40px; object-fit: cover; border-radius: 50%; margin-right: 10px;";

                    const contentDiv = document.createElement("div");
                    contentDiv.innerHTML = `
                    <strong>${comment.userFullName}</strong>
                    <small class="text-muted d-block">${new Date(comment.dateTime).toLocaleString()}</small>
                    <p class="mb-1  comment-text">${comment.content}</p>
                `;

                    div.appendChild(avatar);
                    div.appendChild(contentDiv);
                    list.appendChild(div);
                });
            })
            .catch(error => {
                console.error("Chyba při načítání komentářů:", error); // Debug log pro chyby
            });
    }
</script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        console.log("Dokument byl načten.");  // Log pro potvrzení, že dokument je načten.

        const modal = document.getElementById("openedPostModal");

        if (modal) {
            console.log("Modal okno nalezeno, přidávám posluchač událostí.");  // Log pro potvrzení, že modal je nalezen

            modal.addEventListener("shown.bs.modal", function () {
                console.log("Modal byl zobrazen.");  // Log pro potvrzení, že modal je zobrazený
                const postId = "@Model.Id"; // ASP.NET ti sem vloží správné ID příspěvku
                console.log("ID příspěvku pro načítání komentářů:", postId);  // Log pro ověření ID příspěvku
                loadComments(postId);  // Volání funkce pro načítání komentářů
            });
        } else {
            console.error("Modal okno nebylo nalezeno.");  // Pokud modal není nalezen, logujeme chybu
        }
    })
</script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script> <!-- Zajisti, že jQuery je na stránce -->
<script>
    $(document).ready(function () {
        $('#openedPostModal').on('shown.bs.modal', function () {
            console.log("Modal byl zobrazen.");
            const postId = "@Model.Id";
            console.log("ID příspěvku pro načítání komentářů:", postId);
            loadComments(postId);
            initializePetitionButton(postId);
        });
    });
</script>
